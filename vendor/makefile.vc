PATH=$(MAKEDIR)\env\Scripts;$(PATH);C:\Program Files\7-zip;

# v2.34.0 + koordinates changes
GIT_VER=v2.34.0.windows.1.13
GIT_ARCHIVE=MinGit-$(GIT_VER)-64-bit.zip
GIT_REPO=koordinates/git
GIT_RELEASE=kart-0.11.0-windows

# v1.4.2 + koordinates changes
LIBGIT2_REF=kart-v0.11.1
LIBGIT2_REPO=koordinates/libgit2
LIBGIT2_ARCHIVE=libgit2-$(LIBGIT2_REF).zip

# v1.9.0 + koordinates changes
PYGIT2_REF=kart-v0.11.1
PYGIT2_REPO=koordinates/pygit2
PYGIT2_ARCHIVE=pygit2-$(PYGIT2_REF).zip
PYGIT2_VER=1.9.0

SQLITE_VER=3.31.1
SQLITE_URL=https://www.sqlite.org/2020/sqlite-amalgamation-3310100.zip

# ==================================================================
_PS=powershell.exe -NoLogo -Command
_PSDL=$(_PS) "&{$$ProgressPreference='SilentlyContinue'; [Net.ServicePointManager]::SecurityProtocol=[Net.SecurityProtocolType]::Tls12; Invoke-WebRequest -ErrorAction:Stop
_PSDLE=}"

# we use `pwsh` because of https://github.com/actions/virtual-environments/issues/225
# but we don't seem to need it on normal windows installs
!IFNDEF PWSH
PWSH=powershell.exe
!ENDIF

CFLAGS=-O2
CXXFLAGS=-O2

_ARCHIVE=dist\vendor-Windows.zip

!IFNDEF PY3
PY3=%LOCALAPPDATA%\Programs\Python\Python37\python.exe
!ENDIF

# default target
all: $(_ARCHIVE)

clean:
	-rmdir /Q /S dist env
	-rmdir /Q /S libgit2\build libgit2\env
	-rmdir /Q /S pygit2\src\build pygit2\src\dist
	-rmdir /Q /S pysqlite3\src\build pysqlite3\src\dist

cleaner: clean
	-rmdir /Q /S pygit2\src libgit2\src
	-del git\MinGit.zip
	-del spatialite\mod_spatialite.7z
	-del libgit2\libgit2.zip
	-del pygit2\pygit2.zip
	-del pysqlite3\pysqlite3.zip
	-del pysqlite3\sqlite.zip
	-rmdir /Q /S wheelhouse

env:
	$(PY3) -m venv $@
	.\env\Scripts\pip install \
		pipwin \
		wheel

# Git

# We use a prebuilt MinGit hosted on our own repo.

GIT_URL="https://github.com/$(GIT_REPO)/releases/download/$(GIT_RELEASE)/$(GIT_ARCHIVE)"
git=dist\git

git\$(GIT_ARCHIVE):
	$(_PSDL) -Uri $(GIT_URL) -OutFile $@ $(_PSDLE)

$(git): git\$(GIT_ARCHIVE)
	if not exist dist mkdir dist
	7z x %s -o$@

git: $(git)

# Spatialite

# mirrored from http://www.gaia-gis.it/gaia-sins/windows-bin-amd64/spatialite-loadable-modules-5.0.0-win-amd64.7z
# (for longevity - it seems the gaia-gis system removes releases as soon as there's a newer release.)
SPATIALITE_URL="https://s3-us-west-1.amazonaws.com/build-artifacts.sno.earth/mirrored/spatialite-loadable-modules-5.0.0-win-amd64.7z"
spatialite=dist\env\lib

spatialite\mod_spatialite.7z:
	$(_PSDL) -Uri $(SPATIALITE_URL) -OutFile $@ $(_PSDLE)

$(spatialite): spatialite\mod_spatialite.7z
	if not exist dist\env\lib mkdir dist\env\lib
	7z e -aoa -y -o.\dist\env\lib\ %s
	-rmdir /Q dist\env\lib\mod_spatialite-NG-win-amd64

spatialite: $(spatialite)

# MS VC++ Redist
vcredist=dist\Microsoft_VC142_CRT_x64.msm
# override via /DMSVCREDIST={source-path}
MSVCREDIST=$(VCTOOLSREDISTDIR)\MergeModules

$(vcredist):
	if not exist dist mkdir dist
	copy /Y "$(MSVCREDIST)\$(@F)" $@

vcredist: $(vcredist)

PIPWIN_CACHE=$(USERPROFILE)\.pipwin
$(PIPWIN_CACHE): windows-reqs.txt
	pipwin refresh

# Python wheels
pipwin-wheels: env windows-reqs.txt $(PIPWIN_CACHE)
	-rmdir /Q /S wheelhouse
	mkdir wheelhouse
	pipwin download -d "wheelhouse" -r windows-reqs.txt
	dir wheelhouse\ | find "whl"
	7z t wheelhouse\*.whl

wheelhouse:
# we use `pwsh` because of https://github.com/actions/virtual-environments/issues/225
	if not exist wheelhouse mkdir wheelhouse
	$(PWSH) ./<<tmpDownloadWheels.ps1
$$ErrorActionPreference = 'stop'
$$ProgressPreference='SilentlyContinue'
[Net.ServicePointManager]::SecurityProtocol=[Net.SecurityProtocolType]::Tls12

$$H=(Get-FileHash -Algorithm SHA1 .\windows-reqs.txt).Hash
Write-Output ">>> windows-reqs.txt hash is $$H ..."
$$F="sno-windows-vendor-wheels-$${H}.zip"

$$URL="https://s3-us-west-1.amazonaws.com/build-artifacts.sno.earth/vendor/windows-wheels/$$F"
Write-Output ">>> Downloading $$URL ..."
Invoke-WebRequest -ErrorAction:Stop -Uri "$$URL" -OutFile "wheelhouse\$$F"

Write-Output ">>> Expanding $$F ..."
& 7z x "wheelhouse\$$F" -owheelhouse -aoa
<<NOKEEP
	dir wheelhouse\ | find "whl"
	7z t wheelhouse\*.whl

wheelhouse-archive:
	-del wheelhouse\*.zip
# we use `pwsh` because of https://github.com/actions/virtual-environments/issues/225
	$(PWSH) ./<<tmpArchiveWheels.ps1
$$ErrorActionPreference = 'stop'
$$ProgressPreference='SilentlyContinue'
[Net.ServicePointManager]::SecurityProtocol=[Net.SecurityProtocolType]::Tls12

$$H=(Get-FileHash -Algorithm SHA1 .\windows-reqs.txt).Hash
Write-Output ">>> windows-reqs.txt hash is $$H ..."
$$F="sno-windows-vendor-wheels-$${H}.zip"

Write-Output ">>> Creating wheelhouse\$$F ..."
Compress-Archive -Force -DestinationPath "wheelhouse\$$F" -Path "wheelhouse\*.whl"
<<NOKEEP
	7z l wheelhouse\*.zip


wheels: wheelhouse
	if not exist dist\wheelhouse mkdir dist\wheelhouse
	copy /Y wheelhouse\*.whl dist\wheelhouse

# Libgit2
LIBGIT2_URL="https://github.com/$(LIBGIT2_REPO)/archive/$(LIBGIT2_REF).zip"
libgit2_src=libgit2\src
libgit2=libgit2\env\bin\git2.dll

libgit2\libgit2.zip:
	$(_PSDL) -Uri $(LIBGIT2_URL) -OutFile $@ $(_PSDLE)

$(libgit2_src): libgit2\libgit2.zip
	if exist $@~ rmdir /S /Q $@~
	7z x %s -o$@~
	move /Y $@~\libgit2-* $@
# reinstate once https://github.com/actions/virtual-environments/pull/481 is rolled out
#	rmdir /Q /S $@~

$(libgit2): $(libgit2_src)
	cmake -S .\libgit2\src -B .\libgit2\build \
		-G "Visual Studio 16 2019" \
		-A x64 \
		-DCMAKE_INSTALL_PREFIX=$(MAKEDIR)\libgit2\env \
		-DBUILD_EXAMPLES=NO \
		-DBUILD_CLAR=NO \
		-DUSE_SSH=NO
	cmake \
		--build .\libgit2\build \
		--config RelWithDebInfo
	cmake \
		--install .\libgit2\build \
		--config RelWithDebInfo

libgit2: $(libgit2)

# Pygit2
PYGIT2_URL="https://github.com/$(PYGIT2_REPO)/archive/$(PYGIT2_REF).zip"
pygit2_src=pygit2\src
pygit2=dist\wheelhouse\pygit2-$(PYGIT2_VER)-cp37-cp37m-win_amd64.whl

pygit2\pygit2.zip:
	$(_PSDL) -Uri $(PYGIT2_URL) -OutFile $@ $(_PSDLE)

$(pygit2_src): pygit2\pygit2.zip
	if exist $@~ rmdir /S /Q $@~
	7z x %s -o$@~
	move /Y $@~\pygit2-* $@
# reinstate once https://github.com/actions/virtual-environments/pull/481 is rolled out
#	rmdir /Q /S $@~

$(pygit2): env $(pygit2_src) $(libgit2)
	set LIBGIT2=$(MAKEDIR)\libgit2\env
	if not exist dist\wheelhouse mkdir dist\wheelhouse
	(cd pygit2\src && $(MAKEDIR)\env\Scripts\python setup.py bdist_wheel -d $(MAKEDIR)\dist\wheelhouse)

pygit2: $(pygit2)


# PySQLITE3
PYSQLITE_VER=0.4.5
PYSQLITE3_URL="https://github.com/coleifer/pysqlite3/archive/$(PYSQLITE_VER).zip"
pysqlite3_src=pysqlite3\src
pysqlite3=dist\wheelhouse\pysqlite3-$(PYSQLITE_VER)-cp37-cp37m-win_amd64.whl

pysqlite3\sqlite.zip:
	$(_PSDL) -Uri $(SQLITE_URL) -OutFile $@ $(_PSDLE)

pysqlite3\pysqlite3.zip:
	$(_PSDL) -Uri $(PYSQLITE3_URL) -OutFile $@ $(_PSDLE)

$(pysqlite3_src): pysqlite3\pysqlite3.zip pysqlite3\sqlite.zip
	if exist $@~ rmdir /S /Q $@~
	7z x pysqlite3\pysqlite3.zip -aoa -o$@~
	move /Y $@~\pysqlite3-* $@
	7z e pysqlite3\sqlite.zip -aoa -o$@ *\sqlite3.c *\sqlite3.h

$(pysqlite3): env $(pysqlite3_src)
	if not exist dist\wheelhouse mkdir dist\wheelhouse
	(cd pysqlite3\src && $(MAKEDIR)\env\Scripts\python setup.py build_static)
	(cd pysqlite3\src && $(MAKEDIR)\env\Scripts\python setup.py bdist_wheel -d $(MAKEDIR)\dist\wheelhouse)

pysqlite3: $(pysqlite3)


# Archive
$(_ARCHIVE): $(pygit2) $(pysqlite3) wheels $(git) $(spatialite) $(vcredist)
	if exist $@ del $@
	7z a $@ .\dist\*

archive: $(_ARCHIVE)
